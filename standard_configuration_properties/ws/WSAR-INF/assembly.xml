<?xml version="1.0" encoding="UTF-8"?>
<beans
     xmlns="http://www.springframework.org/schema/beans"
     xmlns:beans="http://www.springframework.org/schema/beans"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:cc="http://www.capeclear.com/assembly/10"
     xmlns:cloud="urn:com.workday/esb/cloud/10.0"
     xmlns:env="http://schemas.xmlsoap.org/soap/envelope/"
     xmlns:pi="urn:com.workday/picof"
     xmlns:wd="urn:com.workday/bsvc"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

    <cc:assembly id="WorkdayAssembly" version="2017.35">
        <cc:local-out id="call_get_request_endpoint" store-message="none" routes-response-to="call_parse_and_store_logging_info" endpoint="vm://@{props['web.service.get.request.endpoint']}">
            <cc:set name="web.service.get.request" value="props['web.service.get.request']"/>
            <cc:set name="report.extra.path" value="props['report.extra.path'] + props['report.filter']"/>
            <cc:set name="web.service.get.response.endpoint" value="props['web.service.get.response.endpoint']"/>
            <cc:set name="web.service.request.log" value="props['web.service.request.log']"/>
            <cc:set name="web.service.get.application" value="props['web.service.get.application']"/>
            <cc:set name="web.service.version" value="props['web.service.version']"/>
            <cc:set name="retrieval.labels" value="props['retrieval.file.labels']"/>
            <cc:set name="convert.ToXML" value="props['web.service.convert.to.xml']"/>
            <cc:set name="convert.ToXML.filename" value="props['web.service.convert.to.xml.filename']"/>
            <cc:set name="web.service.get.conform.xml" value="props['web.service.get.conform.xml']"/>
            <cc:set name="web.service.get.conform.xml.filename" value="props['web.service.get.conform.xml.filename']"/>
            <cc:set name="web.service.get.conform.xml.endpoint" value="props['web.service.get.conform.xml.endpoint']"/>
        </cc:local-out>
        <cc:async-mediation id="get_set_properties" routes-to="set-process-properties">
            <cc:steps>
                <cc:eval id="setup-counters">
                    <cc:expression>props['record.counter'] = 0</cc:expression>
                    <cc:expression>props['record.counter.failed'] = 0</cc:expression>
                    <cc:expression>props['record.counter.imported'] = 0</cc:expression>
                    <cc:expression>props['record.counter.skipped'] = 0</cc:expression>
                    <cc:expression>props['file.number.total'] = -1</cc:expression>
                    <cc:expression>vars['tempfailedoutput.xml']='&lt;blankxml/>'</cc:expression>
                </cc:eval>
                <cc:xslt id="get-properties" output="variable" output-variable="config.properties" url="@{props['properties.file.name']}"/>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-out id="put_running_proc_msg" routes-response-to="get_set_properties" endpoint="vm://wcc/PutIntegrationMessage">
            <cc:set name="is.message.severity" value="'INFO'"/>
            <cc:set name="is.message.summary" value="'Currently Executing: ' + props['running.process']"/>
            <cc:set name="is.message.storage.enabled" value="false"/>
        </cc:local-out>
        <cc:local-in id="begin_migration_process" routes-to="set-ws-props" access="public" icon="local-in-begin_migration_process.png">
            <cc:parameter name="running.process" required="true"/>
            <cc:parameter default="'false'" name="process.retrieved.file" required="false"/>
            <cc:parameter default="'lib/processing/configuration_properties.xsl'" name="properties.file.name" required="true"/>
        </cc:local-in>
        <cc:local-out id="call_process_xml_data" store-message="none" routes-response-to="put_log_processing_stats" endpoint="vm://@{props['web.service.put.request.endpoint']}">
            <cc:set name="web.service.put.request" value="props['web.service.put.request']"/>
            <cc:set name="update.data" value="props['update.data']"/>
            <cc:set name="web.service.put.application" value="props['web.service.put.application']"/>
            <cc:set name="web.service.version" value="props['web.service.version']"/>
            <cc:set name="multi.instance.update.1.wids" value="props['multi.instance.update.1.wids']"/>
            <cc:set name="multi.instance.update.2.wids" value="props['multi.instance.update.2.wids']"/>
            <cc:set name="multi.instance.update.3.wids" value="props['multi.instance.update.3.wids']"/>
            <cc:set name="single.instance.update.1.wids" value="props['single.instance.update.1.wids']"/>
            <cc:set name="single.instance.update.2.wids" value="props['single.instance.update.2.wids']"/>
            <cc:set name="single.instance.update.3.wids" value="props['single.instance.update.3.wids']"/>
            <cc:set name="single.instance.update.1.name" value="props['single.instance.update.1.name']"/>
            <cc:set name="single.instance.update.2.name" value="props['single.instance.update.2.name']"/>
            <cc:set name="single.instance.update.3.name" value="props['single.instance.update.3.name']"/>
            <cc:set name="web.service.auto.complete" value="props['web.service.auto.complete']"/>
            <cc:set name="web.service.add.only" value="props['web.service.add.only']"/>
            <cc:set name="web.service.submit" value="props['web.service.submit']"/>
        </cc:local-out>
        <cc:splitter id="split_response" no-split-message-error="false">
            <cc:sub-route name="process_xml" routes-to="record-counters"/>
            <cc:xml-stream-splitter namespaces="@{props['xml.split.namespace']}" xpath="//@{props['xml.split.tag']}"/>
        </cc:splitter>
        <cc:local-in id="split_and_process_response" routes-to="file-counters" access="public" icon="local-in-split_and_process_response.png">
            <cc:parameter default="-1" name="page.current" required="true"/>
            <cc:parameter default="-1" name="page.total" required="true"/>
            <cc:parameter default="-1" name="record.count.total" required="true"/>
        </cc:local-in>
        <cc:async-mediation id="set-ws-props" routes-to="call_process_retrieved_file">
            <cc:steps>
                <cc:eval id="set-props">
                    <cc:expression>props['web.service.version'] = intsys.getAttribute('Web Service Version')</cc:expression>
                    <cc:expression>props['web.service.count'] = intsys.getAttribute('Web Service Page Count')</cc:expression>
                    <cc:expression>props['web.service.add.only'] = intsys.getAttribute('Web Service Add Only')</cc:expression>
                    <cc:expression>props['web.service.include.reference'] = intsys.getAttribute('Web Service Include Reference')</cc:expression>
                    <cc:expression>props['web.service.auto.complete'] = intsys.getAttribute('Web Service Auto Complete')</cc:expression>
                    <cc:expression>props['web.service.include.descriptors'] = intsys.getAttribute('Web Service Include Descriptors')</cc:expression>
                    <cc:expression>props['web.service.request.log'] = intsys.getAttribute('Log Web Service Request XML')</cc:expression>
                    <cc:expression>props['web.service.response.log'] = intsys.getAttribute('Log Web Service Response XML')</cc:expression>
                    <cc:expression>props['web.service.submit'] = intsys.getAttribute('Web Service Submit')</cc:expression>
                    <cc:expression>props['web.service.effective.date'] = intsys.getAttribute('Web Service Effective Date')</cc:expression>
                    <cc:expression>props['web.service.lock.transaction'] = intsys.getAttribute('Web Service Lock Transaction')</cc:expression>
                    <cc:expression>props['default.business.process.comment'] = intsys.getAttribute('Default Business Process Comment')</cc:expression>
                    <cc:expression>props['web.service.summary.log'] = intsys.getAttribute('Log Summary Import Results')</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-out id="call_process_retrieved_file" execute-when="props['process.retrieved.file'] == 'true'" routes-response-to="put_running_proc_msg" endpoint="vm://common_sftp_file_processing/process_retrieved_file">
            <cc:set name="processfile.subroutine" value="'mass_sync_data/store-retrieved_as_lkp'"/>
        </cc:local-out>
        <cc:local-out id="call_aggregateprocessingdetails" execute-when="props['web.service.summary.log'] == true" endpoint="vm://standard_logging/aggregate_processing_details">
            <cc:set name="summarylog.filename" value="'Summary_Log_Information'"/>
            <cc:set name="summarylog.file.extension" value="'html'"/>
            <cc:set name="record.count.total" value="props['record.count.total']"/>
            <cc:set name="record.counter" value="props['record.counter'] "/>
            <cc:set name="file.number.total" value="props['page.total']"/>
            <cc:set name="file.number.current" value="props['page.current']"/>
            <cc:set name="summary.log.file.extension" value="'html'"/>
        </cc:local-out>
        <cc:async-mediation id="file-counters" routes-to="split_response">
            <cc:steps>
                <cc:eval id="reset-file-counters">
                    <cc:expression>props['file.number.current'] = ((props['file.number.current'] == null)? 0:props['file.number.current']) +1</cc:expression>
                    <cc:expression>props['file.record.counter'] = 0</cc:expression>
                    <cc:expression>props['file.record.counter.imported'] = 0</cc:expression>
                    <cc:expression>props['file.record.counter.failed'] = 0</cc:expression>
                    <cc:expression>props['file.record.counter.skipped'] = 0</cc:expression>
                    <cc:expression>props['aggregation-complete-flag'] = false</cc:expression>
                    <cc:expression>props['summary-transaction-created'] = false</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:async-mediation id="record-counters" routes-to="call_process_xml_data">
            <cc:steps>
                <cc:eval id="incr-counters">
                    <cc:expression>props['record.counter'] = ((props['record.counter'] == null)? 0:props['record.counter']) + 1</cc:expression>
                    <cc:expression>props['file.record.counter'] = ((props['file.record.counter'] == null)? 0:props['file.record.counter']) + 1</cc:expression>
                </cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-out id="call_parse_and_store_logging_info" endpoint="vm://standard_logging/parse_and_store_logging_info">
            <cc:set name="failurexmlsplit" value="'failed_records'"/>
            <cc:set name="logfilexmlsplit" value="'summaryloginfo'"/>
            <cc:set name="process.type" value="props['running.process']"/>
            <cc:set name="record.counter.failed" value="props['record.counter.failed']"/>
            <cc:set name="log.summarydata" value="props['web.service.summary.log']"/>
        </cc:local-out>
        <cc:local-out id="put_log_processing_stats" routes-response-to="call_aggregateprocessingdetails" endpoint="vm://wcc/PutIntegrationMessage">
            <cc:set name="is.message.severity" value="'INFO'"/>
            <cc:set name="is.message.summary" value="'Record ' + props['record.counter'] + ' of ' + props['record.count.total'] + ' for Page ' + props['page.current'] + ' of ' + props['page.total']"/>
            <cc:set name="is.message.storage.enabled" value="false"/>
        </cc:local-out>
        <cc:async-mediation id="set-process-properties" routes-to="set-attributes">
            <cc:steps>
                <cc:eval id="set-process-props-get">
                    <cc:expression>props['web.service.get.application'] = vars['config.properties'].xpath(&quot;//fhc:web_service_information/fhc:get_ws_attributes/fhc:application&quot;, &quot;fhc https://github.com/firehawk-consulting/firehawk/schemas/configuration_file_sync_data.xsd&quot;)</cc:expression>
                    <cc:expression>props['web.service.get.request.filename'] = vars['config.properties'].xpath(&quot;//fhc:web_service_information/fhc:get_ws_attributes/fhc:sub_process/fhc:filename&quot;, &quot;fhc https://github.com/firehawk-consulting/firehawk/schemas/configuration_file_sync_data.xsd&quot;)</cc:expression>
                    <cc:expression>props['web.service.get.request.type'] = vars['config.properties'].xpath(&quot;//fhc:web_service_information/fhc:get_ws_attributes/fhc:sub_process /fhc:sub_type&quot;, &quot;fhc https://github.com/firehawk-consulting/firehawk/schemas/configuration_file_sync_data.xsd&quot;)</cc:expression>
                    <cc:expression>props['web.service.get.request.endpoint'] = vars['config.properties'].xpath(&quot;//fhc:web_service_information/fhc:get_ws_attributes/fhc:sub_process /fhc:endpoint&quot;, &quot;fhc https://github.com/firehawk-consulting/firehawk/schemas/configuration_file_sync_data.xsd&quot;)</cc:expression>
                    <cc:expression>props['web.service.get.convert.to.xml'] = vars['config.properties'].xpath(&quot;//fhc:web_service_information/fhc:get_ws_attributes/fhc:sub_process /fhc:sub_process[@fhc:subprocess_name = 'convert_to_xml']/@fhc:execute_subprocess&quot;, &quot;fhc https://github.com/firehawk-consulting/firehawk/schemas/configuration_file_sync_data.xsd&quot;)</cc:expression>
                    <cc:expression>props['web.service.get.convert.to.xml.filename'] = vars['config.properties'].xpath(&quot;//fhc:web_service_information/fhc:get_ws_attributes/fhc:sub_process /fhc:sub_process[@fhc:subprocess_name = 'convert_to_xml']/fhc:filename&quot;, &quot;fhc https://github.com/firehawk-consulting/firehawk/schemas/configuration_file_sync_data.xsd&quot;)</cc:expression>
                    <cc:expression>props['web.service.get.conform.xml'] = vars['config.properties'].xpath(&quot;//fhc:web_service_information/fhc:get_ws_attributes/fhc:sub_process /fhc:sub_process[@fhc:subprocess_name = 'conform_xml']/@fhc:execute_subprocess&quot;, &quot;fhc https://github.com/firehawk-consulting/firehawk/schemas/configuration_file_sync_data.xsd&quot;)</cc:expression>
                    <cc:expression>props['web.service.get.conform.xml.filename'] = vars['config.properties'].xpath(&quot;//fhc:web_service_information/fhc:get_ws_attributes/fhc:sub_process /fhc:sub_process[@fhc:subprocess_name = 'conform_xml']/fhc:filename&quot;, &quot;fhc https://github.com/firehawk-consulting/firehawk/schemas/configuration_file_sync_data.xsd&quot;)</cc:expression>
                    <cc:expression>props['web.service.get.conform.xml.endpoint'] = vars['config.properties'].xpath(&quot;//fhc:web_service_information/fhc:get_ws_attributes/fhc:sub_process /fhc:sub_process[@fhc:subprocess_name = 'conform_xml']/fhc:endpoint&quot;, &quot;fhc https://github.com/firehawk-consulting/firehawk/schemas/configuration_file_sync_data.xsd&quot;)</cc:expression>
                    <cc:expression>props['web.service.get.filter.multi.instance.1'] = vars['config.properties'].xpath(&quot;//fhc:web_service_information/fhc:get_ws_attributes/fhc:filter_attributes/fhc:multi_instance_filters/fhc:filter_attribute[1]&quot;, &quot;fhc https://github.com/firehawk-consulting/firehawk/schemas/configuration_file_sync_data.xsd&quot;)</cc:expression>
                    <cc:expression>props['web.service.get.filter.multi.instance.2'] = vars['config.properties'].xpath(&quot;//fhc:web_service_information/fhc:get_ws_attributes/fhc:filter_attributes/fhc:multi_instance_filters/fhc:filter_attribute[2]&quot;, &quot;fhc https://github.com/firehawk-consulting/firehawk/schemas/configuration_file_sync_data.xsd&quot;)</cc:expression>
                    <cc:expression>props['web.service.get.filter.multi.instance.3'] = vars['config.properties'].xpath(&quot;//fhc:web_service_information/fhc:get_ws_attributes/fhc:filter_attributes/fhc:multi_instance_filters/fhc:filter_attribute[3]&quot;, &quot;fhc https://github.com/firehawk-consulting/firehawk/schemas/configuration_file_sync_data.xsd&quot;)</cc:expression>
                    <cc:expression>props['web.service.get.filter.single.instance.1'] = vars['config.properties'].xpath(&quot;//fhc:web_service_information/fhc:get_ws_attributes/fhc:filter_attributes/fhc:single_instance_filters/fhc:filter_attribute[1]&quot;, &quot;fhc https://github.com/firehawk-consulting/firehawk/schemas/configuration_file_sync_data.xsd&quot;)</cc:expression>
                    <cc:expression>props['web.service.get.filter.single.instance.2'] = vars['config.properties'].xpath(&quot;//fhc:web_service_information/fhc:get_ws_attributes/fhc:filter_attributes/fhc:single_instance_filters/fhc:filter_attribute[2]&quot;, &quot;fhc https://github.com/firehawk-consulting/firehawk/schemas/configuration_file_sync_data.xsd&quot;)</cc:expression>
                    <cc:expression>props['web.service.get.filter.single.instance.3'] = vars['config.properties'].xpath(&quot;//fhc:web_service_information/fhc:get_ws_attributes/fhc:filter_attributes/fhc:single_instance_filters/fhc:filter_attribute[3]&quot;, &quot;fhc https://github.com/firehawk-consulting/firehawk/schemas/configuration_file_sync_data.xsd&quot;)</cc:expression>
                    <cc:expression>props['web.service.get.response.endpoint'] = vars['config.properties'].xpath(&quot;//fhc:web_service_information/fhc:get_ws_attributes/fhc:sub_process /fhc:sub_process[@fhc:subprocess_name = 'start_put']/fhc:endpoint&quot;, &quot;fhc https://github.com/firehawk-consulting/firehawk/schemas/configuration_file_sync_data.xsd&quot;)</cc:expression>
                    <cc:expression>props['xml.split.namespace'] = vars['config.properties'].xpath(&quot;//fhc:web_service_information/fhc:get_ws_attributes/fhc:split_data/@fhc:namespace&quot;, &quot;fhc https://github.com/firehawk-consulting/firehawk/schemas/configuration_file_sync_data.xsd&quot;)</cc:expression>
                    <cc:expression>props['xml.split.tag'] = vars['config.properties'].xpath(&quot;//fhc:web_service_information/fhc:get_ws_attributes/fhc:split_data/fhc:tag&quot;, &quot;fhc https://github.com/firehawk-consulting/firehawk/schemas/configuration_file_sync_data.xsd&quot;)</cc:expression>
                    <cc:expression>props['report.alias'] = vars['config.properties'].xpath(&quot;//fhc:web_service_information/fhc:get_ws_attributes/fhc:report_alias&quot;, &quot;fhc https://github.com/firehawk-consulting/firehawk/schemas/configuration_file_sync_data.xsd&quot;)</cc:expression>
                    <cc:expression>props['report.filter'] = vars['config.properties'].xpath(&quot;//fhc:web_service_information/fhc:get_ws_attributes/fhc:filter_attributes/fhc:report_filter&quot;, &quot;fhc https://github.com/firehawk-consulting/firehawk/schemas/configuration_file_sync_data.xsd&quot;)</cc:expression>
                    <cc:expression>props['retrieval.file.labels'] = vars['config.properties'].xpath(&quot;//fhc:web_service_information/fhc:get_ws_attributes/fhc:filter_attributes/fhc:file_label&quot;, &quot;fhc https://github.com/firehawk-consulting/firehawk/schemas/configuration_file_sync_data.xsd&quot;)</cc:expression>
                    <cc:expression>props['web.service.put.workday.id.tag'] = vars['config.properties'].xpath(&quot;//fhc:web_service_information/fhc:put_ws_attributes/fhc:workday_transaction_id_tag&quot;, &quot;fhc https://github.com/firehawk-consulting/firehawk/schemas/configuration_file_sync_data.xsd&quot;)</cc:expression>
                    <cc:expression>props['web.service.put.workday.id.namespace'] = vars['config.properties'].xpath(&quot;//fhc:web_service_information/fhc:put_ws_attributes/fhc:workday_transaction_id_tag/@fhc:transaction_id_namespace&quot;, &quot;fhc https://github.com/firehawk-consulting/firehawk/schemas/configuration_file_sync_data.xsd&quot;)</cc:expression>
                </cc:eval>
                <cc:eval id="set-process-props-put">
                    <cc:expression>props['web.service.put.application'] = vars['config.properties'].xpath(&quot;//fhc:web_service_information/fhc:put_ws_attributes/fhc:application&quot;, &quot;fhc https://github.com/firehawk-consulting/firehawk/schemas/configuration_file_sync_data.xsd&quot;)</cc:expression>
                    <cc:expression>props['web.service.put.request'] = vars['config.properties'].xpath(&quot;//fhc:web_service_information/fhc:put_ws_attributes/fhc:sub_process/fhc:filename&quot;, &quot;fhc https://github.com/firehawk-consulting/firehawk/schemas/configuration_file_sync_data.xsd&quot;)</cc:expression>
                    <cc:expression>props['web.service.put.request.endpoint'] = vars['config.properties'].xpath(&quot;//fhc:web_service_information/fhc:put_ws_attributes/fhc:sub_process /fhc:endpoint&quot;, &quot;fhc https://github.com/firehawk-consulting/firehawk/schemas/configuration_file_sync_data.xsd&quot;)</cc:expression>
                    <cc:expression>props['web.service.put.update.multi.instance.1'] = vars['config.properties'].xpath(&quot;//fhc:web_service_information/fhc:put_ws_attributes/fhc:update_attributes/fhc:multi_instance_updates/fhc:update_attribute[1]&quot;, &quot;fhc https://github.com/firehawk-consulting/firehawk/schemas/configuration_file_sync_data.xsd&quot;)</cc:expression>
                    <cc:expression>props['web.service.put.update.multi.instance.2'] = vars['config.properties'].xpath(&quot;//fhc:web_service_information/fhc:put_ws_attributes/fhc:update_attributes/fhc:multi_instance_updates/fhc:update_attribute[2]&quot;, &quot;fhc https://github.com/firehawk-consulting/firehawk/schemas/configuration_file_sync_data.xsd&quot;)</cc:expression>
                    <cc:expression>props['web.service.put.update.multi.instance.3'] = vars['config.properties'].xpath(&quot;//fhc:web_service_information/fhc:put_ws_attributes/fhc:update_attributes/fhc:multi_instance_updates/fhc:update_attribute[3]&quot;, &quot;fhc https://github.com/firehawk-consulting/firehawk/schemas/configuration_file_sync_data.xsd&quot;)</cc:expression>
                    <cc:expression>props['web.service.put.update.single.instance.1'] = vars['config.properties'].xpath(&quot;//fhc:web_service_information/fhc:put_ws_attributes/fhc:update_attributes/fhc:single_instance_updates/fhc:update_attribute[1]&quot;, &quot;fhc https://github.com/firehawk-consulting/firehawk/schemas/configuration_file_sync_data.xsd&quot;)</cc:expression>
                    <cc:expression>props['web.service.put.update.single.instance.2'] = vars['config.properties'].xpath(&quot;//fhc:web_service_information/fhc:put_ws_attributes/fhc:update_attributes/fhc:single_instance_updates/fhc:update_attribute[2]&quot;, &quot;fhc https://github.com/firehawk-consulting/firehawk/schemas/configuration_file_sync_data.xsd&quot;)</cc:expression>
                    <cc:expression>props['web.service.put.update.single.instance.3'] = vars['config.properties'].xpath(&quot;//fhc:web_service_information/fhc:put_ws_attributes/fhc:update_attributes/fhc:single_instance_updates/fhc:update_attribute[3]&quot;, &quot;fhc https://github.com/firehawk-consulting/firehawk/schemas/configuration_file_sync_data.xsd&quot;)</cc:expression>
                    <cc:expression>props['web.service.put.update.data.attribute'] = vars['config.properties'].xpath(&quot;//fhc:web_service_information/fhc:put_ws_attributes/fhc:update_attributes/fhc:update_data_attribute&quot;, &quot;fhc https://github.com/firehawk-consulting/firehawk/schemas/configuration_file_sync_data.xsd&quot;)</cc:expression>
                    <cc:expression>props['web.service.put.workday.id.tag'] = vars['config.properties'].xpath(&quot;//fhc:web_service_information/fhc:put_ws_attributes/fhc:workday_transaction_id_data/fhc:tag&quot;, &quot;fhc https://github.com/firehawk-consulting/firehawk/schemas/configuration_file_sync_data.xsd&quot;)</cc:expression>
                    <cc:expression>props['web.service.put.workday.id.namespace'] = vars['config.properties'].xpath(&quot;//fhc:web_service_information/fhc:put_ws_attributes/fhc:workday_transaction_id_data/@fhc:namespace&quot;, &quot;fhc https://github.com/firehawk-consulting/firehawk/schemas/configuration_file_sync_data.xsd&quot;)</cc:expression>
                </cc:eval></cc:steps>
        </cc:async-mediation>
        <cc:async-mediation id="set-attributes" routes-to="call_get_request_endpoint">
            <cc:steps>
                <cc:eval id="set-attribute-values">
                    <cc:expression>props['multi.instance.filter.1.wids'] = (props['web.service.get.filter.multi.instance.1'].length() == 0)? 'no': intsys.getAttributeReferenceDataList(props['web.service.get.filter.multi.instance.1'], 'WID').toString().replace(&quot;[&quot;,&quot;&quot;).replace(&quot;]&quot;,&quot;&quot;)</cc:expression>
                    <cc:expression>props['multi.instance.filter.2.wids'] = (props['web.service.get.filter.multi.instance.2'].length() == 0)? 'no': intsys.getAttributeReferenceDataList(props['web.service.get.filter.multi.instance.2'], 'WID').toString().replace(&quot;[&quot;,&quot;&quot;).replace(&quot;]&quot;,&quot;&quot;)</cc:expression>
                    <cc:expression>props['multi.instance.filter.3.wids'] = (props['web.service.get.filter.multi.instance.3'].length() == 0)? 'no': intsys.getAttributeReferenceDataList(props['web.service.get.filter.multi.instance.3'], 'WID').toString().replace(&quot;[&quot;,&quot;&quot;).replace(&quot;]&quot;,&quot;&quot;)</cc:expression>
                    <cc:expression>props['single.instance.filter.1.wids'] = (props['web.service.get.filter.single.instance.1'].length() == 0)? 'no': intsys.getAttributeReferenceData(props['web.service.get.filter.single.instance.1'], 'WID')</cc:expression>
                    <cc:expression>props['single.instance.filter.2.wids'] = (props['web.service.get.filter.single.instance.2'].length() == 0)? 'no': intsys.getAttributeReferenceData(props['web.service.get.filter.single.instance.2'], 'WID')</cc:expression>
                    <cc:expression>props['single.instance.filter.3.wids'] = (props['web.service.get.filter.single.instance.3'].length() == 0)? 'no': intsys.getAttributeReferenceData(props['web.service.get.filter.single.instance.3'], 'WID')</cc:expression>
                    <cc:expression>props['multi.instance.update.1.wids'] = (props['web.service.put.update.multi.instance.1'].length() == 0)? 'no': intsys.getAttributeReferenceDataList(props['web.service.put.update.multi.instance.1'], 'WID').toString().replace(&quot;[&quot;,&quot;&quot;).replace(&quot;]&quot;,&quot;&quot;)</cc:expression>
                    <cc:expression>props['multi.instance.update.2.wids'] = (props['web.service.put.update.multi.instance.2'].length() == 0)? 'no': intsys.getAttributeReferenceDataList(props['web.service.put.update.multi.instance.2'], 'WID').toString().replace(&quot;[&quot;,&quot;&quot;).replace(&quot;]&quot;,&quot;&quot;)</cc:expression>
                    <cc:expression>props['multi.instance.update.3.wids'] = (props['web.service.put.update.multi.instance.3'].length() == 0)? 'no': intsys.getAttributeReferenceDataList(props['web.service.put.update.multi.instance.3'], 'WID').toString().replace(&quot;[&quot;,&quot;&quot;).replace(&quot;]&quot;,&quot;&quot;)</cc:expression>
                    <cc:expression>props['single.instance.update.1.wids'] = (props['web.service.put.update.single.instance.1'].length() == 0)? 'no': intsys.getAttributeReferenceData(props['web.service.put.update.single.instance.1'], 'WID')</cc:expression>
                    <cc:expression>props['single.instance.update.2.wids'] = (props['web.service.put.update.single.instance.2'].length() == 0)? 'no': intsys.getAttributeReferenceData(props['web.service.put.update.single.instance.2'], 'WID')</cc:expression>
                    <cc:expression>props['single.instance.update.3.wids'] = (props['web.service.put.update.single.instance.3'].length() == 0)? 'no': intsys.getAttributeReferenceData(props['web.service.put.update.single.instance.3'], 'WID')</cc:expression>
                    <cc:expression>props['single.instance.update.1.name'] = (props['web.service.put.update.single.instance.1'].length() == 0)? 'no': intsys.getAttribute(props['web.service.put.update.single.instance.1'])</cc:expression>
                    <cc:expression>props['single.instance.update.2.name'] = (props['web.service.put.update.single.instance.2'].length() == 0)? 'no': intsys.getAttribute(props['web.service.put.update.single.instance.2'])</cc:expression>
                    <cc:expression>props['single.instance.update.3.name'] = (props['web.service.put.update.single.instance.3'].length() == 0)? 'no': intsys.getAttribute(props['web.service.put.update.single.instance.3'])</cc:expression>
                    <cc:expression>props['update.data'] = intsys.getAttributeAsBoolean(props['web.service.put.update.data.attribute'], true)</cc:expression>
                    <cc:expression>props['report.extra.path'] = (props['report.alias'].length() == 0)? 'no': intsys.reportService.getExtrapath(props['report.alias'])</cc:expression>
                </cc:eval></cc:steps>
        </cc:async-mediation>
    </cc:assembly>

</beans>
